AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  FunctionUrl:
    Description: 'API endpoint URL for Prod environment'
    Value:
      Fn::GetAtt:
        - thumbnailerLambdaUrl
        - FunctionUrl
  FunctionUrlDomainOnly:
    Description: 'API endpoint URL for Prod environment'
    Value: !Select [2, !Split ["/", !GetAtt thumbnailerLambdaUrl.FunctionUrl ]]
Resources:
  svgThumbnailerFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: 'code.paramicons.testedsoftware.org'
        S3Key: 'svgthumbnailer-1.0.13-fat.jar'
      Environment:
        Variables:
          s3bucket: 'paramicons.testedsoftware.org'
      Handler: 'org.testedsoftware.paramicons.SvgThumbnailHandler'
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - thumbnailerFunctionFunctionRole
          - Arn
      Runtime: 'java17'
      Timeout: 30
  thumbnailerFunctionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - 'edgelambda.amazonaws.com'
                - 'lambda.amazonaws.com'

        Version: '2012-10-17'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::paramicons.testedsoftware.org/*'

            Version: '2012-10-17'
          PolicyName: 's3Policy'

  thumbnailerFunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunctionUrl'
      FunctionName: !Ref svgThumbnailerFunction
      FunctionUrlAuthType: 'NONE'
      Principal: '*'
  thumbnailerLambdaUrl:
    Type: 'AWS::Lambda::Url'
    Properties:
      AuthType: 'NONE'
      TargetFunctionArn: !Ref svgThumbnailerFunction
  websiteResourcesCloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - 'paramicons.testedsoftware.org'
        CacheBehaviors:
          - AllowedMethods:
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
              - 'PUT'
              - 'PATCH'
              - 'POST'
              - 'DELETE'
            Compress: 'true'
            DefaultTTL: 0
            ForwardedValues:
              QueryString: 'true'
            MinTTL: 0
            PathPattern: '/share/*'
            TargetOriginId: 'webcrawler'
            ViewerProtocolPolicy: 'allow-all'

        DefaultCacheBehavior:
          AllowedMethods:
            - 'GET'
            - 'HEAD'
          Compress: 'true'
          DefaultTTL: 0
          ForwardedValues:
            QueryString: 'true'
          MinTTL: 0
          TargetOriginId: 'S3Origin'
          ViewerProtocolPolicy: 'allow-all'
        DefaultRootObject: 'index.html'
        Enabled: 'true'
        HttpVersion: 'http2'
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'match-viewer'
            DomainName: !Select [2, !Split ["/", !GetAtt thumbnailerLambdaUrl.FunctionUrl ]]
            Id: 'webcrawler'

          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: 'http-only'
            DomainName:
              !Join
                - ''
                - - !Ref websiteResourcesHostingBucket
                  - '.s3-website-us-east-1.amazonaws.com'

            Id: 'S3Origin'

        ViewerCertificate:
          AcmCertificateArn: 'arn:aws:acm:us-east-1:950651224730:certificate/78fab14f-b918-42cd-bb4f-2bea3153d252'
          SslSupportMethod: 'sni-only'
  websiteResourcesDnsRecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      Comment: 'DNS records associated with testedsoftware.org. static site'
      HostedZoneName: 'testedsoftware.org.'
      RecordSets:
        - AliasTarget:
            DNSName:
              Fn::GetAtt:
                - websiteResourcesCloudFrontDistribution
                - DomainName
            HostedZoneId: 'Z2FDTNDATAQYW2'
          Name: 'paramicons.testedsoftware.org'
          Type: 'A'

        - AliasTarget:
            DNSName:
              Fn::GetAtt:
                - websiteResourcesCloudFrontDistribution
                - DomainName
            HostedZoneId: 'Z2FDTNDATAQYW2'
          Name: 'paramicons.testedsoftware.org'
          Type: 'AAAA'

  websiteResourcesHostingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'paramicons.testedsoftware.org'
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: 'false'
      WebsiteConfiguration:
        ErrorDocument: 'index.html'
        IndexDocument: 'index.html'
  websiteResourcesHostingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref websiteResourcesHostingBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Principal:
              AWS:
                - '*'
            Resource:
              - !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref websiteResourcesHostingBucket
                    - '/*'



        Version: '2012-10-17'
Transform: 'AWS::Serverless-2016-10-31'
